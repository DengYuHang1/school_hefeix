


请进行程序设计，找出n个输入数据中的所有素数，对其进行求和运算。
输入说明：
输入数据共占两行，第一行为测试数据个数n，第二行为要输入的n个数据(数据类型为int，n<100)，相邻两个输入数据用空格间隔(每个输入数据介于0到100之间，不包括0和100)。
输出说明：
输出数据占一行，即为输入的n个数中所有素数的和。
注：请严格按照输入输出说明编写程序
#include<stdio.h>
int main()
{
	int i,n,j,s=0,a[200];
	scanf("%d",&n);
	for(i=0;i<n;i++) scanf("%d",&a[i]);
	for(i=0;i<n;i++)
	{
	for(j=2;j<a[i];j++)
	if(a[i]%j==0) break;
	if(j==a[i]) s+=a[i];	
	}
	printf("%d",s);
	return 0;
 } 
素数幻方
 求四阶的素数幻方。即在一个4*4的矩阵中，每一个格填入一个数字，使每一行、每一列和两条对角线上的四个数字所组成的四位数，均为可逆素数。
**输入格式要求："%d" 提示信息："There are magic aquares with invertable primes as follow:\n"
**输出格式要求："No.%d\n" "%6d"
程序运行示例如下：
There are magic aquares with invertable primes as follow:
No.1
     1     1     9     3
     1     0     0     9
     9     2     2     1
     3     1     9     1
No.2
     1     1     9     3
     1     0     2     1
     9     0     2     9
     3     9     1     1
......
#include <math.h>
#include <stdio.h>
int number[210][5];
int select [110];
int array[4][5];
int count;
int selecount;
int larray[2][200];
int lcount[2];
main()
{  	  	  	 	   
    int i, k, flag, cc = 0, i1, i4;
    printf("There are magic aquares with invertable primes as follow:\n");
    for (i = 1001; i < 9999; i += 2)
    {  	  	  	 	   
        k = i / 1000;
        if (k % 2 != 0 && k != 5 && num(i))
        {  	  	  	 	   
            number[count][0] = i;
            process(count++);
            if (number[count - 1][2] % 2 != 0 && number[count - 1][3] % 2 != 0
                    && number[count - 1][2] != 5 && number[count - 1][3] != 5)
                select[selecount++] = count - 1;
        }
    }
    larray[0][lcount[0]++] = number[0][0] / 100;
    larray[1][lcount[1]++] = number[0][0] / 10;
    for (i = 1; i < count; i++)
    {  	  	  	 	   
        if (larray[0][lcount[0] - 1] != number[i][0] / 100)
            larray[0][lcount[0]++] = number[i][0] / 100;
        if (larray[1][lcount[1] - 1] != number[i][0] / 10)
            larray[1][lcount[1]++] = number[i][0] / 10;
    }
    for (i1 = 0; i1 < selecount; i1++)
    {  	  	  	 	   
        array[0][0] = select[i1];
        copy_num(0);
        for (array[1][0] = 0; array[1][0] < count; array[1][0]++)
        {  	  	  	 	   
            copy_num(1);
            if (!comp_num(2))
                continue;
            for (array[2][0] = 0; array[2][0] < count; array[2][0]++)
            {  	  	  	 	   
                copy_num(2);
                if (!comp_num(3))
                    continue;
                for (i4 = 0; i4 < selecount; i4++)
                {  	  	  	 	   
                    array[3][0] = select[i4];
                    copy_num(3);
                    for (flag = 1, i = 1; flag && i <= 4; i++)
                        if (!find1(i)) flag = 0;
                    if (flag && find2())
                    {  	  	  	 	   
                        printf("No.%d\n", ++cc);
                        p_array();
                    }
                }
            }

        }

    }
}  	  	  	 	   
num(int number)
{  	  	  	 	   
    int j;
    if (!ok(number)) return(0);
    for (j = 0; number > 0; number /= 10)
        j = j * 10 + number % 10;
    if (!ok(j)) return(0);
    return(1);
}  	  	  	 	   
ok (int number)
{  	  	  	 	   
    int i, j;
    if (number % 2 == 0) return(0);
    j = sqrt((double)number) + 1;
    for (i = 3; i <= j; i += 2)
        if (number % i == 0)return(0);
    return(1);
}  	  	  	 	   
process(int i)
{  	  	  	 	   
    int j, num;
    num = number[i][0];
    for (j = 4; j >= 1; j--, num /= 10)
        number[i][j] = num % 10;
}  	  	  	 	   
copy_num(int i)
{  	  	  	 	   
    int j;
    for (j = 1; j <= 4; j++)
        array[i][j] = number[array[i][0]][j];
}  	  	  	 	   
comp_num (int n)
{  	  	  	 	   
    static int ii;
    static int jj;
    int i, num, k, *p;
    int *pcount;
    switch (n)
    {  	  	  	 	   
    case 2:
        pcount = &lcount[0];
        p = &ii;
            break;
    case 3:
        pcount = &lcount[1];
        p = &jj;
        break;
    default:
        return(0);
    }
    for (i = 1; i <= 4; i++)
    {  	  	  	 	   
        for (num = 0, k = 0; k < n; k++)
            num = num * 10 + array[k][i];
        if ( num <= larray[n - 2][*p] )
            for (; *p >= 0 && num < larray[n - 2][*p]; (*p)--)
                ;
        else
            for (; *p < *pcount && num > larray[n - 2][*p]; (*p)++);
        if ( *p < 0 || *p >= *pcount )
        {  	  	  	 	   
            *p = 0;
            return(0);
        }
        if ( num != larray[n - 2][*p] )
            return(0);

    }
    return(1);
}  	  	  	 	   
find1 (int i)
{  	  	  	 	   
    int num, j;
    for (num = 0, j = 0; j < 4; j++ )
        num = num * 10 + array[j][i];
    return (find0(num));
}  	  	  	 	   
find2(void)
{  	  	  	 	   
    int num1, num2, j, i;
    for (num1 = 0, j = 0; j < 4; j++)
        num1 = num1 * 10 + array[j][j + 1];
    for (num2 = 0, j = 0, i = 4; j < 4; j++, i--)
        num2 = num2 * 10 + array[j][i];
    if (find0(num1))
        return(find0(num2));
    else return(0);
}  	  	  	 	   
find0 (int num)
{  	  	  	 	   
    static int j;
    if (num <= number[j][0])
        for (; j >= 0 && num < number[j][0]; j--);
    else
        for (; j < count && num > number[j][0]; j++);
    if (j < 0 || j >= count)
    {  	  	  	 	   
        j = 0;
        return(0);
    }
    if (num == number[j][0])
        return(1);
    else return(0);
}  	  	  	 	   
p_array(void)
{  	  	  	 	   
    int i, j;
    for (i = 0; i < 4; i++)
    {  	  	  	 	   
        for (j = 1; j <= 4; j++)
            printf("%6d", array[i][j]);
        printf("\n");

    }
}
第12章实验1：学生成绩管理系统V5.0

#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>
#define   MAX_LEN  10                       
#define   STU_NUM 30                    
#define   COURSE_NUM 6                     
typedef struct student
{		 		 	     
    long num;                     
    char name[MAX_LEN];            
    float score[COURSE_NUM];        
    float sum;                          
    float aver;                     
}		 		 	      STU;
int   Menu(void);
void  ReadScore(STU stu[], int n, int m);
void  AverSumofEveryStudent(STU stu[], int n, int m);
void  AverSumofEveryCourse(STU stu[], int n, int m);
void  SortbyScore(STU stu[], int n, int m, int (*compare)(float a, float b));
int   Ascending(float a, float b);
int   Descending(float a, float b);
void  SwapFloat(float *x, float *y);
void  SwapLong(long *x, long *y);
void  SwapChar(char x[], char y[]);
void  AsSortbyNum(STU stu[], int n, int m);
void  SortbyName(STU stu[], int n, int m);
void  SearchbyNum(STU stu[], int n, int m);
void  SearchbyName(STU stu[], int n, int m);
void  StatisticAnalysis(STU stu[], int n, int m);
void  PrintScore(STU stu[], int n, int m);
int main()
{		 		 	     
    char  ch;
    int   n = 0, m = 0;  
    STU   stu[STU_NUM];
    printf("Input student number(n<=30):\n", STU_NUM);
    scanf("%d", &n);
    while (1)
    {		 		 	     
        ch = Menu();                       
        switch (ch)
        {		 		 	     
        case 1:
            printf("Input course number(m<=%d):\n", COURSE_NUM);
            scanf("%d", &m);
            ReadScore(stu, n, m);
            break;
        case 2:
            AverSumofEveryCourse(stu, n, m);
            break;
        case 3:
            AverSumofEveryStudent(stu, n, m);
            break;
        case 4:
            SortbyScore(stu, n, m, Descending);
            printf("Sort in descending order by score:\n");
            PrintScore(stu, n, m);
            break;
        case 5:
            SortbyScore(stu, n, m, Ascending);
            printf("Sort in ascending order by score:\n");
            PrintScore(stu, n, m);
            break;
        case 6:
            AsSortbyNum(stu, n, m);
            printf("Sort in ascending order by number:\n");
            PrintScore(stu, n, m);
            break;
        case 7:
            SortbyName(stu, n, m);
            printf("Sort in dictionary order by name:\n");
            PrintScore(stu, n, m);
            break;
        case 8:
            SearchbyNum(stu, n, m);
            break;
        case 9:
            SearchbyName(stu, n, m);
            break;
        case 10:
            StatisticAnalysis(stu, n, m);
            break;
        case 11:
            PrintScore(stu, n, m);
            break;
        case 0:
            printf("End of program!");
            exit(0);
        default:
            printf("Input error!\n");
        }
    }
    return 0;
}		 		 	     

int Menu(void)
{		 		 	     
    int itemSelected;
    printf("Management for Students' scores\n");
    printf("1.Input record\n");
    printf("2.Caculate total and average score of every course\n");
    printf("3.Caculate total and average score of every student\n");
    printf("4.Sort in descending order by score\n");
    printf("5.Sort in ascending order by score\n");
    printf("6.Sort in ascending order by number\n");
    printf("7.Sort in dictionary order by name\n");
    printf("8.Search by number\n");
    printf("9.Search by name\n");
    printf("10.Statistic analysis\n");
    printf("11.List record\n");
    printf("0.Exit\n");
    printf("Please Input your choice:\n");
    scanf("%d", &itemSelected);     
    return itemSelected;
}		 		 	     

void ReadScore(STU stu[], int n, int m)
{		 		 	     
    int i, j;
    printf("Input student's ID, name and score:\n");
    for (i = 0; i < n; i++)
    {		 		 	     
        scanf("%ld%s", &stu[i].num, stu[i].name);
        for (j = 0; j < m; j++)
        {		 		 	     
            scanf("%f", &stu[i].score[j]);
        }
    }
}		 		 	     

void AverSumofEveryStudent(STU stu[], int n, int m)
{		 		 	     
    int i, j;
    for (i = 0; i < n; i++)
    {		 		 	     
        stu[i].sum = 0;
        for (j = 0; j < m; j++)
        {		 		 	     
            stu[i].sum = stu[i].sum + stu[i].score[j];
        }
        stu[i].aver = m > 0 ? stu[i].sum / m : -1;
        printf("student %d: sum=%.0f,aver=%.0f\n",
               i + 1, stu[i].sum, stu[i].aver);
    }
}		 		 	     

void AverSumofEveryCourse(STU stu[], int n, int m)
{		 		 	     
    int    i, j;
    float sum[COURSE_NUM], aver[COURSE_NUM];
    for (j = 0; j < m; j++)
    {		 		 	     
        sum[j] = 0;
        for (i = 0; i < n; i++)
        {		 		 	     
            sum[j] = sum[j] + stu[i].score[j];
        }
        aver[j] = n > 0 ? sum[j] / n : -1;
        printf("course %d:sum=%.0f,aver=%.0f\n", j + 1, sum[j], aver[j]);
    }
}		 		 	     

void SortbyScore(STU stu[], int n, int m, int (*compare)(float a, float b))
{		 		 	     
    int  i, j, k, t;
    for (i = 0; i < n - 1; i++)
    {		 		 	     
        k = i;
        for (j = i + 1; j < n; j++)
        {		 		 	     
            if ((*compare)(stu[j].sum, stu[k].sum))  k = j;
        }
        if (k != i)
        {		 		 	     
            for (t = 0; t < m; t++)        
            {		 		 	     
                SwapFloat(&stu[k].score[t], &stu[i].score[t]);
            }
            SwapFloat(&stu[k].sum, &stu[i].sum);    
            SwapFloat(&stu[k].aver, &stu[i].aver);
            SwapLong(&stu[k].num, &stu[i].num);    
            SwapChar(stu[k].name, stu[i].name);    
        }
    }
}		 		 	     

int Ascending(float a, float b)
{		 		 	     
    return a < b;     
}		 		 	     

int Descending(float a, float b)
{		 		 	     
    return a > b;    
}		 		 	     

void  SwapFloat(float *x, float *y)
{		 		 	     
    float  temp;
    temp = *x;
    *x = *y;
    *y = temp;
}		 		 	     

void  SwapLong(long *x, long *y)
{		 		 	     
    long   temp;
    temp = *x;
    *x = *y;
    *y = temp;
}		 		 	     

void  SwapChar(char x[], char y[])
{		 		 	     
    char temp[MAX_LEN];
    strcpy(temp, x);
    strcpy(x, y);
    strcpy(y, temp);
}		 		 	     

void AsSortbyNum(STU stu[], int n, int m)
{		 		 	     
    int  i, j, k, t;
    for (i = 0; i < n - 1; i++)
    {		 		 	     
        k = i;
        for (j = i + 1; j < n; j++)
        {		 		 	     
            if (stu[j].num < stu[k].num) k = j;
        }
        if (k != i)
        {		 		 	     
            for (t = 0; t < m; t++)       
            {		 		 	     
                SwapFloat(&stu[k].score[t], &stu[i].score[t]);
            }
            SwapFloat(&stu[k].sum, &stu[i].sum);    
            SwapFloat(&stu[k].aver, &stu[i].aver); 
            SwapLong(&stu[k].num, &stu[i].num);     
            SwapChar(stu[k].name, stu[i].name);    
        }
    }
}		 		 	     

void SortbyName(STU stu[], int n, int m)
{		 		 	     
    int  i, j, t;
    for (i = 0; i < n - 1; i++)
    {		 		 	     
        for (j = i + 1; j < n; j++)
        {		 		 	     
            if (strcmp(stu[j].name, stu[i].name) < 0)
            {		 		 	     
                for (t = 0; t < m; t++) 
                {		 		 	     
                    SwapFloat(&stu[i].score[t], &stu[j].score[t]);
                }
                SwapFloat(&stu[i].sum, &stu[j].sum);   
                SwapFloat(&stu[i].aver, &stu[j].aver); 
                SwapLong(&stu[i].num, &stu[j].num);     
                SwapChar(stu[i].name, stu[j].name);   
            }
        }
    }
}		 		 	     

void SearchbyNum(STU stu[], int n, int m)
{		 		 	     
    long  number;
    int   i, j;
    printf("Input the number you want to search:\n");
    scanf("%ld", &number);
    for (i = 0; i < n; i++)
    {		 		 	     
        if (stu[i].num == number)
        {		 		 	     
            printf("%ld\t%s\t", stu[i].num, stu[i].name);
            for (j = 0; j < m; j++)
            {		 		 	     
                printf("%.0f\t", stu[i].score[j]);
            }
            printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
            return;
        }
    }
    printf("Not found!\n");
}		 		 	     

void SearchbyName(STU stu[], int n, int m)
{		 		 	     
    char x[MAX_LEN];
    int  i, j;
    printf("Input the name you want to search:\n");
    scanf("%s", x);
    for (i = 0; i < n; i++)
    {		 		 	     
        if (strcmp(stu[i].name, x) == 0)
        {		 		 	     
            printf("%ld\t%s\t", stu[i].num, stu[i].name);
            for (j = 0; j < m; j++)
            {		 		 	     
                printf("%.0f\t", stu[i].score[j]);
            }
            printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
            return;
        }
    }
    printf("Not found!\n");
}		 		 	     

void StatisticAnalysis(STU stu[], int n, int m)
{		 		 	     
    int  i, j, total, t[6];
    for (j = 0; j < m; j++)
    {		 		 	     
        printf("For course %d:\n", j + 1);
        memset(t, 0, sizeof(t));    
        for (i = 0; i < n; i++)
        {		 		 	     
            if (stu[i].score[j] >= 0 && stu[i].score[j] < 60) t[0]++;
            else if (stu[i].score[j] < 70)                    t[1]++;
            else if (stu[i].score[j] < 80)                   t[2]++;
            else if (stu[i].score[j] < 90)                   t[3]++;
            else if (stu[i].score[j] < 100)                   t[4]++;
            else if (stu[i].score[j] == 100)                t[5]++;
        }
        for (total = 0, i = 0; i <= 5; i++)
        {		 		 	     
            total = total + t[i];
        }
        for (i = 0; i <= 5; i++)
        {		 		 	     
            if (i == 0) printf("<60\t%d\t%.2f%%\n", t[i], (float)t[i] / n * 100);
            else if (i == 5) printf("%d\t%d\t%.2f%%\n",
                                        (i + 5) * 10, t[i], (float)t[i] / n * 100);
            else    printf("%d-%d\t%d\t%.2f%%\n",
                               (i + 5) * 10, (i + 5) * 10 + 9, t[i], (float)t[i] / n * 100);
        }
    }
}		 		 	     

void PrintScore(STU stu[], int n, int m)
{		 		 	     
    int i, j;
    for (i = 0; i < n; i++)
    {		 		 	     
        printf("%ld\t%s\t", stu[i].num, stu[i].name);
        for (j = 0; j < m; j++)
        {		 		 	     
            printf("%.0f\t", stu[i].score[j]);
        }
        printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
    }
}
按如下公式递归计算矩阵行列式的值：
#include <math.h>
#include <stdio.h>
 
#define  CONST 1e-6
#define  SIZE 20
 
void InputMatrix (double a[][SIZE], int n);
double DeterminantValue(double a[][SIZE], int n);
void SubMatrix(double a[][SIZE], double b[][SIZE], int n, int row, int col);
void PrintMatrix(double a[][SIZE], int n);
int main(void)
{                        
    double  a[SIZE][SIZE];
    int     n;
    double  result;
    printf("Please enter matrix size n(1<=n<%d):", SIZE);
    scanf("%d", &n);
    printf("Please input matrix line by line:\n");
    InputMatrix(a, n);
    printf("matrix a:\n");
    PrintMatrix(a, n);
    printf("\n");
    result = DeterminantValue(a, n);
    printf("result = %f\n", result);
    return 0;
}                        

void InputMatrix (double a[][SIZE], int n)
{                        
    int i, j;
    for (i = 0; i < n; i++)
    {                        
        for (j = 0; j < n; j++)
        {                        
            scanf("%lf", &a[i][j]);
        }
    }
}                        

double DeterminantValue(double a[][SIZE], int n)
{                        
    int    i = 0, j = 0;
    double temp, result, b[SIZE][SIZE];
    if (n == 1)
    {                        
        result = a[0][0];
    }
    else if (n == 2)
    {                        
        result = a[0][0] * a[1][1] - a[0][1] * a[1][0];
    }
    else
    {                        
        result = 0.0;
        for (j = 0; j < n; j++)
        {                        
            SubMatrix(a, b, n, i, j);
            printf("Submatrix:\n");
            PrintMatrix(b, n - 1);
            temp = DeterminantValue(b, n - 1);
            result += pow(-1, i + j) * a[0][j] * temp;
            printf("DValue of the Submatrix is %6.1f\n", temp);
        }
    }
    return result;
}                        

void SubMatrix(double a[][SIZE], double b[][SIZE], int n, int row,
               int col)
{                        
    int i, j, ii = 0, jj = 0;
    for (i = 0; i < n; i++)
    {                        
        jj = 0;
        for (j = 0; j < n; j++)
        {                        
            if (i != row && j != col)
            {                        
                b[ii][jj] = a[i][j];
                jj++;
            }
        }
        if (i != row && j != col)
        {                        
            ii++;
        }
    }
}                        

void PrintMatrix(double a[][SIZE], int n)
{                        
    int i, j;
    for (i = 0; i < n; i++)
    {                        
        for (j = 0; j < n; j++)
        {                        
            printf("%6.1f\t", a[i][j]);
        }
        printf("\n");
    }
}            





编写程序统计从键盘输入的一行文本中各个字母的个数。

#include <stdio.h>

int main( )
{
    char a[10000];
    int b[26] = {0},i,j,m,c,d[26];
 i = 0;
    for (; i<10000; i++) {
        a[i] = getchar();
        if (a[i] == '\n') {
            break;
        }
        if ('a' <= a[i]&&a[i] <= 'z')
            b[a[i] - 'a']++;
        else if ('A' <= a[i]&&a[i] <= 'Z')
          b[a[i] - 'A']++;
    }
    for (i = 0; i < 26; i++) d[i]=i;
    for (i = 0; i < 26; i++) {
        for (j = 0; j < 25 - i ; j++) {
            if (b[j] < b[j+1]) {
             c = b[j];
                b[j] = b[j+1];
                b [j+1] = c;
                m = d[j];
                d[j] = d[j+1];
                d[j+1] = m;
            }
          
        }
    }

    for (i = 0; i <26; i++) {
        printf("%c(%c):%d\n",d[i]+'A',d[i]+'a',b[i]  );
    }
    
}
用函数编程实现输出 m~n之间所有素数，并求和，m和n由键盘输入。素数是只能被1和自身整除的大于1的正整数。 要求程序能对用户输入的数据进行正确性检查，满足条件：m和n都是大于1的正整数，并且m<=n。
1. 要求编写函数InputNumber 实现用户输入一个正整数，并对数的合法性进行检查，如果读入不成功(例如：输入字符串)，或者数不合法即不是大于1的正整数，则重新输入，直到输入正确为止。
函数原型：
unsigned int InputNumber(char ch);
形式参数：ch，用于生成输入提示信息。
返回值：返回正确的输入值。
输入提示信息：printf("Please input the number %c(>1):",ch);
输入格式："%d"
输入错误提示信息："The input must be an integer larger than 1!\n"
提示：测试scanf的返回值来判断是否成功读入数据。
2. 要求编写函数IsPrime判断自然数x是否为素数，如果x是素数则返回1，不是素数返回0。
函数原型：
int IsPrime(unsigned int n); 
返回值：如果x是素数则返回1，不是素数返回0。

3. 要求编写函数PrimeSum 输出m到n之间所有素数并返回它们的和。
函数原型：
int PrimeSum(unsigned int m, unsigned int n);
返回值：m到n之间所有素数的和。
每个素数的输出格式："%d\n"


#include <stdio.h>
unsigned int InputNumber(char ch);
int IsPrime(unsigned int n);
int PrimeSum(unsigned int m, unsigned int n);
int main()
{		      		   
    int m = 0,n = 0,sum = 0,i = 0;
    do
    {		      		   
        m = InputNumber('m');
        n = InputNumber('n');
    }while(m > n && printf("n must be not smaller than m! Input again!\n"));
    sum = PrimeSum(m,n);
    printf("sum of prime numbers:%d",sum);
    return 0;
}		      		   
int PrimeSum(unsigned int m, unsigned int n)
{		      		   
    int sum = 0,i;
    for(i = m; i<= n; i++)
    {		      		   
        if(IsPrime(i))
        {		      		   
            printf("%d\n",i);
            sum+= i;
        }
    }
    return sum;
}		      		   
unsigned int InputNumber(char ch)
{		      		   
    int n, in;
    do
    {		      		   
        printf("Please input the number %c(>1):",ch);
        in = scanf("%d",&n);
        while(getchar()!='\n');
    }while((in!=1 || n < 2) && printf("The input must be an integer larger than 1!\n") );
    return n;
}		      		   
int IsPrime(unsigned int n)
{		      		   
    int isPrime = 1,i;
    for(i = 2; i < n; i++)
    {		      		   
        if(n%i==0)
        {		      		   
            isPrime = 0;
            break;
        }
    }
    return isPrime;
}
某销售公司在年末的时候会向员工发放红包，发放的红包金额共有5种，获取的条件各不相同：　　
1) 五颗星红包，每人8000元，平均月绩效大于80件商品（>80），并且在本年度满勤；
2) 四颗星红包，每人4000元，平均月绩效大于85件商品（>85），并且在民主评议中高于80分（>80）的员工均可获得；
3) 三颗星红包，每人2000元，平均月绩效大于90件商品（>90）的员工均可获得；
4) 二颗星红包，每人1000元，平均月绩效大于85件商品（>85）的外地员工均可获得；
5) 一颗星红包，每人850元，民主评议高于80分（>80）的优秀员工均可获得；
　　只要符合条件就可以获得年终红包，每个级别的红包没有获奖人数限制，每名员工可以同时获得多个级别的红包。
　　现在给出若干员工的相关数据，请计算哪位员工获得的红包金额最高。
输入：
    第一行数据用于输入员工总数X（1 <= X <= 100），接下来的X行每行是一名员工的数据，从左向右依次是姓名，平均月绩效，民主评议成绩，是否是优秀员工，是否是外地员工，以及是否年度满勤。姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格）；平均月绩效和民主评议成绩都是0到100之间的整数（包括0和100）；是否是优秀员工、是否是外地员工以及是否年度满勤均用布尔变量表示，Y表示是，N表示不是。每两个相邻数据项之间用一个空格分隔。
输出：
  输出数据包括三行，第一行是获得红包金最多的员工姓名，第二行是这位员工获得的红包金额总数。如果有两名或两名以上的员工获得的奖金最多，输出他们之中在输入数据中出现最早的员工的姓名。第三行是这X名员工获得的红包金额的总数。
输入：
5 
a 87 82 Y N N
b 88 78 N Y Y
c 92 88 N N N
d 83 87 Y N Y
e 90 88 Y N Y
输出：
e
12850
41550
#include<stdio.h>
#include<String.h>
#include<stdbool.h>
int calc(int jx,int py,bool yx,bool wd,bool mq)
{		 		 		   	 
	int sum=0;
	if(jx>80 && mq) sum+=8000;
	if(jx>85&& py>80) sum+=4000;
	if(jx>90) sum+=2000;
	if(wd&&jx>85) sum+=1000;
	if(yx&&py>80) sum+=850;
	return sum;
}		 		 		   	 

int main()
{		 		 		   	 

	int m;
	scanf("%d",&m);
	int max_num=0,sum=0;
	char win[20];
	while(m--)
		{		 		 		   	 
		    int jx,py;
            char xm[20],yxs[3],wds[3],mqs[3];
			scanf("%s%d%d%s%s%s",xm,&jx,&py,yxs,wds,mqs);
			bool yx=strcmp(yxs,"Y"),wd=strcmp(wds,"Y"),mq=strcmp(mqs,"Y");
			int num=calc(jx,py,!yx,!wd,!mq);
			sum+=num;//1
			if(num>max_num) {
				max_num=num;
			    strcpy(win,xm);
			}
		}
		printf("%s\n%d\n%d\n",win,max_num,sum);
	return 0;
}	
第9章实验1:学生成绩管理系统V2.0
#include<stdio.h>
typedef struct student
{
	long ID;
	float score;
	
} STU;
 
int main()
{
	int n; int k,i,ii;float sum = 0;
	STU stu[30];
	printf("Input student number(n<30):\n");
	scanf("%d",&n);
	do {
		
		printf("Management for Students' scores\n");
		printf("1.Input record\n");
		printf("2.Caculate total and average score of course\n");
		printf("3.Sort in descending order by score\n");
		printf("4.Sort in ascending order by score\n");
		printf("5.Sort in ascending order by number\n");
		printf("6.Search by number\n");
		printf("7.Statistic analysis\n");
		printf("8.List record\n");
		printf("0.Exit\n");
		printf("Please Input your choice:\n");
		scanf("%d",&k);
		if (k == 1)
		{printf("Input student's ID and score:\n");
			for (i = 0; i < n; i++)
			{
				
				scanf("%ld%f", &stu[i].ID, &stu[i].score);
				sum += stu[i].score;
			}
 
		}
		else if (k >= 9 || k < 0)
		{
			printf("Input error!\n");
		}
		else if(k == 0)
		{
			printf("End of program!");
			break;
		}
		else if (k == 2)
		{
			printf("sum=%.0f,aver=%.2f\n",sum,sum/n);
		}
		else if (k == 3)
		{
			printf("Sort in descending order by score:\n" );
			int q, w, e;float temp1; long temp2;
			for (q = 0; q < n - 1; q++)
			{
				e = q;
				for (w = q + 1; w < n; w++)
				{
					if (stu[w].score > stu[e].score)
					{
						e = w;
					}
				}
				if (e != q)
				{
					temp1 = stu[e].score; stu[e].score = stu[q].score; stu[q].score = temp1;
					temp2 = stu[e].ID; stu[e].ID = stu[q].ID; stu[q].ID = temp2;
				}
			}
			for (i = 0; i < n; i++)
			{
				printf("%ld\t%.0f\n", stu[i].ID, stu[i].score);
 
			}
		}
		else if (k == 4) {
			printf("Sort in ascending order by score:\n");
			for (ii = n - 1; ii >= 0; ii--)
			{
				printf("%ld\t%.0f\n", stu[ii].ID, stu[ii].score);
 
			}}
		else if(k == 5)
		{
			printf("Sort in ascending order by number:\n");
			int q1, w1, e1; float temp11; long temp21;
			for (q1 = 0; q1 < n - 1; q1++)
			{
				e1 = q1;
				for (w1= q1 + 1; w1 < n; w1++)
				{
					if (stu[w1].ID > stu[e1].ID)
					{
						e1 = w1;
					}
				}
				if (e1 != q1)
				{
					temp11 = stu[e1].score; stu[e1].score = stu[q1].score; stu[q1].score = temp11;
					temp21= stu[e1].ID; stu[e1].ID = stu[q1].ID; stu[q1].ID = temp21;
				}
			}
			for (i = n-1; i>=0; i--)
			{
				printf("%ld\t%.0f\n", stu[i].ID, stu[i].score);
 
			}
			
		}
		else if (k == 6)
		{
			long num;
			int numx,count=0;
			printf("Input the number you want to search:\n");
			scanf("%ld",&num);
			for (i = 0; i < n; i++)
			{
				if (stu[i].ID == num)
				{
					printf("%ld\t%.0f\n", stu[i].ID, stu[i].score);
					break;
				}
				count++;
			}
			if (count >= n)
			{
				printf("Not found!\n");
			}
 
		}
		else if (k == 7)
		{
			int i6=0,i7=0,i8=0,i9=0,i10=0,i11=0;
			for (i = 0; i < n; i++)
			{
				
				if (stu[i].score < 60)
				{
					i6++;
				}
				else if (stu[i].score >= 60 && stu[i].score < 70)
				{
					i7++;
				}
				else if (stu[i].score >= 70 && stu[i].score < 80)
				{
					i8++;
				}
				else if (stu[i].score>=80&& stu[i].score<90){
					i9++;
				}
				else if(stu[i].score>=90&& stu[i].score<99)
				{
					i10++;
				}
				else if (stu[i].score == 100)
				{
					i11++;
				}
			}
			printf("<60\t%d\t%.2f%%\n", i6, (float)i6/ (float)n*100);
			printf("%d-%d\t%d\t%.2f%%\n",60,69, i7, (float)i7/ (float)n*100);
			printf("%d-%d\t%d\t%.2f%%\n",70,79, i8, (float)i8/ (float)n*100);
			printf("%d-%d\t%d\t%.2f%%\n",80,89, i9, (float)i9/ (float)n*100);
			printf("%d-%d\t%d\t%.2f%%\n",90,99,i10, (float)i10/ (float)n*100);
			printf("%d\t%d\t%.2f%%\n",100,i11,(float)i11/(float)n*100);
		}
		else if (k == 8)
		{
			int q11, w11, e11; float temp111; long temp211;
			for (q11 = 0; q11 < n - 1; q11++)
			{
				e11 = q11;
				for (w11 = q11 + 11; w11 < n; w11++)
				{
					if (stu[w11].ID > stu[e11].ID)
					{
						e11 = w11;
					}
				}
				if (e11 != q11)
				{
					temp111 = stu[e11].score; stu[e11].score = stu[q11].score; stu[q11].score = temp111;
					temp211 = stu[e11].ID; stu[e11].ID = stu[q11].ID; stu[q11].ID = temp211;
				}
			}
			for (i = n - 1; i >= 0; i--)
			{
				printf("%ld\t%.0f\n", stu[i].ID, stu[i].score);
 
			}
		}
	} while (k != 0);
 
	return 0;
}
第11章实验1：学生成绩管理系统V4.0
#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>
#define   MAX_LEN  10                      
#define   STU_NUM 30                       
#define   COURSE_NUM 6                    
int   Menu(void);
void  ReadScore(long num[], char name[][MAX_LEN],
                float score[][COURSE_NUM], int n, int m);
void AverSumofEveryStudent(float score[][COURSE_NUM], int n, int m,
                           float  sum[STU_NUM], float aver[STU_NUM]);
void AverSumofEveryCourse(float score[][COURSE_NUM], int n, int m);
void  SortbyScore(long num[], char name[][MAX_LEN],
                  float score[][COURSE_NUM], float  sum[], float aver[],
                  int n, int m, int (*compare)(float a, float b));
int   Ascending(float a, float b);
int   Descending(float a, float b);
void  SwapFloat(float *x, float *y);
void  SwapLong(long *x, long *y);
void  SwapChar(char x[], char y[]);
void  AsSortbyNum(long num[], char name[][MAX_LEN],
                  float score[][COURSE_NUM], float  sum[], float aver[],
                  int n, int m);
void  SortbyName(long num[], char name[][MAX_LEN],
                 float score[][COURSE_NUM], float  sum[], float aver[],
                 int n, int m);
void  SearchbyNum(long num[], char name[][MAX_LEN],
                  float score[][COURSE_NUM], float  sum[], float aver[],
                  int n, int m);
void  SearchbyName(long num[], char name[][MAX_LEN],
                   float score[][COURSE_NUM], float  sum[], float aver[],
                   int n, int m);
void  StatisticAnalysis(float score[][COURSE_NUM], int n, int m);
void  PrintScore(long num[], char name[][MAX_LEN],
                 float score[][COURSE_NUM], float  sum[], float aver[],
                 int n, int m) ;
int main()
{		 		 	 	  	
    char  ch;
    int   n = 0, m = 0;
    float score[STU_NUM][COURSE_NUM], sum[STU_NUM], aver[STU_NUM];
    long num[STU_NUM];
    char name[STU_NUM][MAX_LEN];
    printf("Input student number(n<30):\n", STU_NUM);
    scanf("%d", &n);
    while (1)
    {		 		 	 	  	
        ch = Menu();                    
        switch (ch)
        {		 		 	 	  	
        case 1:
            printf("Input course number(m<=%d):\n", COURSE_NUM);
            scanf("%d", &m);
            ReadScore(num, name, score, n, m);
            break;
        case 2:
            AverSumofEveryCourse(score, n, m);
            break;
        case 3:
            AverSumofEveryStudent(score, n, m, sum, aver);
            break;
        case 4:
            SortbyScore(num, name, score, sum, aver, n, m, Descending);
            printf("Sort in descending order by score:\n");
            PrintScore(num, name, score, sum, aver, n, m);
            break;
        case 5:
            SortbyScore(num, name, score, sum, aver, n, m, Ascending);
            printf("Sort in ascending order by score:\n");
            PrintScore(num, name, score, sum, aver, n, m);
            break;
        case 6:
            AsSortbyNum(num, name, score, sum, aver, n, m);
            printf("Sort in ascending order by number:\n");
            PrintScore(num, name, score, sum, aver, n, m);
            break;
        case 7:
            SortbyName(num, name, score, sum, aver, n, m);
            printf("Sort in dictionary order by name:\n");
            PrintScore(num, name, score, sum, aver, n, m);
            break;
        case 8:
            SearchbyNum(num, name, score, sum, aver, n, m);
            break;
        case 9:
            SearchbyName(num, name, score, sum, aver, n, m);
            break;
        case 10:
            StatisticAnalysis(score, n, m);
            break;
        case 11:
            PrintScore(num, name, score, sum, aver, n, m);
            break;
        case 0:
            printf("End of program!");
            exit(0);
        default:
            printf("Input error!\n");
        }
    }
    return 0;
}	

int Menu(void)
{		 		 	 	  	
    int itemSelected;
    printf("Management for Students' scores\n");
    printf("1.Input record\n");
    printf("2.Caculate total and average score of every course\n");
    printf("3.Caculate total and average score of every student\n");
    printf("4.Sort in descending order by score\n");
    printf("5.Sort in ascending order by score\n");
    printf("6.Sort in ascending order by number\n");
    printf("7.Sort in dictionary order by name\n");
    printf("8.Search by number\n");
    printf("9.Search by name\n");
    printf("10.Statistic analysis\n");
    printf("11.List record\n");
    printf("0.Exit\n");
    printf("Please Input your choice:\n");
    scanf("%d", &itemSelected);     /* 读入用户输入 */
    return itemSelected;
}		 

void ReadScore(long num[], char name[][MAX_LEN],
               float score[][COURSE_NUM], int n, int m)
{		 		 	 	  	
    int i, j;
    printf("Input student's ID, name and score:\n");
    for (i = 0; i < n; i++)
    {		 		 	 	  	
        scanf("%ld%s", &num[i], name[i]);
        for (j = 0; j < m; j++)
        {		 		 	 	  	
            scanf("%f", &score[i][j]);
        }
    }
}		 		 	 	  	

void AverSumofEveryStudent(float score[][COURSE_NUM], int n, int m,
                           float  sum[STU_NUM], float aver[STU_NUM])
{		 		 	 	  	
    int i, j;
    for (i = 0; i < n; i++)
    {		 		 	 	  	
        sum[i] = 0;
        for (j = 0; j < m; j++)
        {		 		 	 	  	
            sum[i] = sum[i] + score[i][j];
        }
        aver[i] = m > 0 ? sum[i] / m : -1;
        printf("student %d:sum=%.0f,aver=%.0f\n", i + 1, sum[i], aver[i]);
    }
}

void AverSumofEveryCourse(float score[][COURSE_NUM], int n, int m)
{		 		 	 	  	
    int i, j;
    float  sum[COURSE_NUM], aver[COURSE_NUM];
    for (j = 0; j < m; j++)
    {		 		 	 	  	
        sum[j] = 0;
        for (i = 0; i < n; i++)
        {		 		 	 	  	
            sum[j] = sum[j] + score[i][j];
        }
        aver[j] = n > 0 ? sum[j] / n : -1;
        printf("course %d:sum=%.0f,aver=%.0f\n", j + 1, sum[j], aver[j]);
    }
}		 		 	 	  	

void SortbyScore(long num[], char name[][MAX_LEN],
                 float score[][COURSE_NUM], float  sum[], float aver[],
                 int n, int m, int (*compare)(float a, float b))
{		 		 	 	  	
    int  i, j, k, t;
    for (i = 0; i < n - 1; i++)
    {		 		 	 	  	
        k = i;
        for (j = i + 1; j < n; j++)
        {		 		 	 	  	
            if ((*compare)(sum[j], sum[k]))     k = j;
        }
        if (k != i)
        {		 		 	 	  	
            for (t = 0; t < m; t++) 
            {		 		 	 	  	
                SwapFloat(&score[k][t], &score[i][t]);
            }
            SwapFloat(&sum[k], &sum[i]);     
            SwapFloat(&aver[k], &aver[i]);  
            SwapLong(&num[k], &num[i]);      
            SwapChar(name[k], name[i]);     
        }
    }
}		 	

int Ascending(float a, float b)
{		 		 	 	  	
    return a < b;     
}		 		 	 	  	

int Descending(float a, float b)
{		 		 	 	  	
    return a > b;    
}		 		 	 	  	

void  SwapFloat(float *x, float *y)
{		 		 	 	  	
    float  temp;
    temp = *x;
    *x = *y;
    *y = temp;
}		 		 	 	  	

void  SwapLong(long *x, long *y)
{		 		 	 	  	
    long   temp;
    temp = *x;
    *x = *y;
    *y = temp;
}		 		 	 	  	

void  SwapChar(char x[], char y[])
{		 		 	 	  	
    char temp[MAX_LEN];
    strcpy(temp, x);
    strcpy(x, y);
    strcpy(y, temp);
}

void AsSortbyNum(long num[], char name[][MAX_LEN],
                 float score[][COURSE_NUM], float  sum[], float aver[],
                 int n, int m)
{		 		 	 	  	
    int  i, j, k, t;
    for (i = 0; i < n - 1; i++)
    {		 		 	 	  	
        k = i;
        for (j = i + 1; j < n; j++)
        {		 		 	 	  	
            if (num[j] < num[k]) k = j;
        }
        if (k != i)
        {		 		 	 	  	
            for (t = 0; t < m; t++)
            {		 		 	 	  	
                SwapFloat(&score[k][t], &score[i][t]);
            }
            SwapFloat(&sum[k], &sum[i]);     
            SwapFloat(&aver[k], &aver[i]);  
            SwapLong(&num[k], &num[i]);      
            SwapChar(name[k], name[i]);     
        }
    }
}		 		 	 	  	

void SortbyName(long num[], char name[][MAX_LEN], float score[][COURSE_NUM],
                float  sum[], float aver[], int n, int m)
{		 		 	 	  	
    int  i, j, t;
    for (i = 0; i < n - 1; i++)
    {		 		 	 	  	
        for (j = i + 1; j < n; j++)
        {		 		 	 	  	
            if (strcmp(name[j], name[i]) < 0)
            {		 		 	 	  	
                for (t = 0; t < m; t++) 
                {		 		 	 	  	
                    SwapFloat(&score[i][t], &score[j][t]);
                }
                SwapFloat(&sum[i], &sum[j]);    
                SwapFloat(&aver[i], &aver[j]);  
                SwapLong(&num[i], &num[j]);      
                SwapChar(name[i], name[j]);      
            }
        }
    }
}

void SearchbyNum(long num[], char name[][MAX_LEN],
                 float score[][COURSE_NUM], float  sum[], float aver[],
                 int n, int m)
{		 		 	 	  	
    long  number;
    int   i, j;
    printf("Input the number you want to search:\n");
    scanf("%ld", &number);
    for (i = 0; i < n; i++)
    {		 		 	 	  	
        if (num[i] == number)
        {		 		 	 	  	
            printf("%ld\t%s\t", num[i], name[i]);
            for (j = 0; j < m; j++)
            {		 		 	 	  	
                printf("%.0f\t", score[i][j]);
            }
            printf("%.0f\t%.0f\n", sum[i], aver[i]);
            return;
        }
    }
    printf("Not found!\n");
}		 		 	 	  	

void SearchbyName(long num[], char name[][MAX_LEN],
                  float score[][COURSE_NUM], float  sum[], float aver[],
                  int n, int m)
{		 		 	 	  	
    char x[MAX_LEN];
    int  i, j;
    printf("Input the name you want to search:\n");
    scanf("%s", x);
    for (i = 0; i < n; i++)
    {		 		 	 	  	
        if (strcmp(name[i], x) == 0)
        {		 		 	 	  	
            printf("%ld\t%s\t", num[i], name[i]);
            for (j = 0; j < m; j++)
            {		 		 	 	  	
                printf("%.0f\t", score[i][j]);
            }
            printf("%.0f\t%.0f\n", sum[i], aver[i]);
            return;
        }
    }
    printf("Not found!\n");
}

void StatisticAnalysis(float score[][COURSE_NUM], int n, int m)
{		 		 	 	  	
    int  i, j, total, t[6];
    for (j = 0; j < m; j++)
    {		 		 	 	  	
        printf("For course %d:\n", j + 1);
        memset(t, 0, sizeof(t));  
        for (i = 0; i < n; i++)
        {		 		 	 	  	
            if (score[i][j] >= 0 && score[i][j] < 60)  t[0]++;
            else if (score[i][j] < 70)               t[1]++;
            else if (score[i][j] < 80)               t[2]++;
            else if (score[i][j] < 90)               t[3]++;
            else if (score[i][j] < 100)              t[4]++;
            else if (score[i][j] == 100)            t[5]++;
        }
        for (total = 0, i = 0; i <= 5; i++)
        {		 		 	 	  	
            total = total + t[i];
        }
        for (i = 0; i <= 5; i++)
        {		 		 	 	  	
            if (i == 0) printf("<60\t%d\t%.2f%%\n", t[i], (float)t[i] / n * 100);
            else if (i == 5) printf("%d\t%d\t%.2f%%\n",
                                        (i + 5) * 10, t[i], (float)t[i] / n * 100);
            else    printf("%d-%d\t%d\t%.2f%%\n",
                               (i + 5) * 10, (i + 5) * 10 + 9, t[i], (float)t[i] / n * 100);
        }
    }
}

void PrintScore(long num[], char name[][MAX_LEN],
                float score[][COURSE_NUM], float  sum[],
                float aver[], int n, int m)
{		 		 	 	  	
    int i, j;
    for (i = 0; i < n; i++)
    {		 		 	 	  	
        printf("%ld\t%s\t", num[i], name[i]);
        for (j = 0; j < m; j++)
        {		 		 	 	  	
            printf("%.0f\t", score[i][j]);
        }
        printf("%.0f\t%.0f\n", sum[i], aver[i]);
    }
}
梅森尼数
形如2^i-1的素数，称为梅森尼数。编程计算并输出指数i在[2,n]中的所有梅森尼数，并统计这些梅森尼数的个数，其中n的值由键盘输入，并且n的值不能大于50。其中，2^i表示2的i次方，请不要使用pow(2,i)编程计算，应采用循环累乘求积的方式计算2^i。
提示：当i超过30以后，2^i-1的值会很大，不能用long型变量来存储，必须使用double类型来存储。对于double类型变量x（不是整型）不能执行求余运算，即不能用x%i == 0来判断x是否能被i整除，可以使用x/i == (long long)(x/i)来判断x是否能被i整除。
#include<stdio.h>
#include<math.h>
int Isprime(double x);
double power(int n);
int main()
{
    int n,i,num=0;
    printf("Input n:\n");
    scanf("%d",&n);
    for(i=1;i<=n;i++)
    {
        if(Isprime(power(i)-1))
        {
            num++;
            printf("2^%d-1=%.0f\n",i,power(i)-1);
        }
    }
    printf("count=%d\n",num);
}
double power(int n)
{
    if(n==1)return 2;
    else return 2*power(n-1);
}
int Isprime(double x)
{
    int i;
    if(1==x)return 0;
    for(i=2;i<+sqrt(x);i++)
    {
        if((int)x%i==0)return 0;
    }
    return 1;
}
计算1-1/2+1/3-1/4+…+1/99-1/100+…,直到最后一项的绝对值小于10-4为止。
#include<stdio.h>
main()
{
    int  i;
    float sum,sign;
    i=1;
    sum=0;
    sign=1.0;
    while((1.0/i)>=1e-4)
	{
        sum += sign / i ;
        i++;
        sign = - sign;
	}
    printf("	sum = 0.693092");
}